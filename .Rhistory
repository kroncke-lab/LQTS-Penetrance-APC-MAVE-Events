covariates <- c("traff_score", "revel_score", "lqt2_dist", "am_pathogenicity", "pore") #
complete_rows_in_f <- complete.cases(f[, covariates])
tmp<-f[complete_rows_in_f,]
# Initialize variables
delta <- 10
count <- 0
# EM Loop
while(delta > 0.01 & count < 20) {
count <- count + 1
# Fit the model using 'f' with complete data for current covariates
regression_formula <- as.formula(paste("p_mean_w ~", paste(covariates, collapse = " + ")))
model <- glm(regression_formula, data = tmp, weights = tmp$weight)
# Make predictions and update only those rows in 'tmp'
prediction_output <- predict(model, newdata = tmp, se.fit = TRUE, type = "response")
predictions <- pmin(pmax(prediction_output$fit, 0.0005), 1)
variance_f <- (prediction_output$se.fit)^2
# Assuming predictions and variance_f are vectors
alpha_beta <- solab(predictions, variance_f)
# Length of each segment (assuming alpha_beta is a single column)
segment_length <- length(alpha_beta) / 2
# Extract alpha values (first half of alpha_beta)
alpha_f <- alpha_beta[1:segment_length]
beta_f <- alpha_beta[(segment_length + 1):(2 * segment_length)]
new_mean <- (alpha_f + tmp$lqt2) / (alpha_f + beta_f + tmp$total_carriers)
delta <- 100 * sum(abs(new_mean - tmp$p_mean_w)) / length(tmp$var)
tmp$p_mean_w <- new_mean
tmp[tmp$p_mean_w<0,"p_mean_w"]<-0.005
mean_alpha <- mean(alpha_f)
mean_beta <- mean(beta_f)
print(paste("Mean alpha:", mean_alpha, "Mean beta:", mean_beta))
print(paste("Delta:", delta, "Count:", count))
}
# when tuning parameter is 11, predictions are equivalent to "nu" variant heterozygote phenotypes
nu <- 10
prior_mean <- tmp$p_mean_w
tmp$prior_mean <- tmp$p_mean_w
variance <- prior_mean*(1-prior_mean)
variance <- variance / (1 + nu)
ind_a <- seq(1, length(variance),1)
ind_b <- seq(length(variance)+1, length(variance)*2,1)
alpha <- solab(prior_mean,variance)[ind_a]
beta <- solab(prior_mean,variance)[ind_b]
new_mean <- (alpha + tmp$lqt2)/(alpha + beta + tmp$total_carriers)
tmp$p_mean_w <- new_mean
tmp$alpha <- alpha
tmp$beta <- beta
sub.tmp<-tmp # reassign tmp so I can still use it in the next chunk
covariates <- c("revel_score", "lqt2_dist", "am_pathogenicity", "pore")
new_complete_rows_in_f <- complete.cases(f[, covariates])
tmp<-f[new_complete_rows_in_f,]
delta <- 10
count <- 0
# EM Loop
while(delta > 0.01 & count < 20) {
count <- count + 1
# Fit the model using 'f' with complete data for current covariates
regression_formula <- as.formula(paste("p_mean_w ~", paste(covariates, collapse = " + ")))
model <- glm(regression_formula, data = tmp, weights = tmp$weight)
# Make predictions and update only those rows in 'tmp'
prediction_output <- predict(model, newdata = tmp, se.fit = TRUE, type = "response")
predictions <- pmin(pmax(prediction_output$fit, 0.0005), 1)
variance_f <- (prediction_output$se.fit)^2
# Assuming predictions and variance_f are vectors
alpha_beta <- solab(predictions, variance_f)
# Length of each segment (assuming alpha_beta is a single column)
segment_length <- length(alpha_beta) / 2
# Extract alpha values (first half of alpha_beta)
alpha_f <- alpha_beta[1:segment_length]
beta_f <- alpha_beta[(segment_length + 1):(2 * segment_length)]
new_mean <- (alpha_f + tmp$lqt2) / (alpha_f + beta_f + tmp$total_carriers)
delta <- 100 * sum(abs(new_mean - tmp$p_mean_w)) / length(tmp$var)
tmp$p_mean_w <- new_mean
tmp[tmp$p_mean_w<0,"p_mean_w"]<-0.005
mean_alpha <- mean(alpha_f)
mean_beta <- mean(beta_f)
print(paste("Mean alpha:", mean_alpha, "Mean beta:", mean_beta))
print(paste("Delta:", delta, "Count:", count))
}
# when tuning parameter is 11, predictions are equivalent to 10 variant heterozygote phenotypes
prior_mean <- tmp$p_mean_w
tmp$prior_mean <- tmp$p_mean_w
variance <- prior_mean*(1-prior_mean)
variance <- variance / (1 + nu)
ind_a <- seq(1, length(variance),1)
ind_b <- seq(length(variance)+1, length(variance)*2,1)
alpha <- solab(prior_mean,variance)[ind_a]
beta <- solab(prior_mean,variance)[ind_b]
new_mean <- (alpha + tmp$lqt2)/(alpha + beta + tmp$total_carriers)
tmp$p_mean_w <- new_mean
tmp$alpha <- alpha
tmp$beta <- beta
sub.tmp1 <- subset(tmp, !var %in% sub.tmp$var)
covariates <- c("lqt2_dist", "pore")
new_complete_rows_in_f <- complete.cases(f[, covariates])
tmp<-f[new_complete_rows_in_f,]
delta <- 10
count <- 0
# EM Loop
while(delta > 0.01 & count < 20) {
count <- count + 1
# Fit the model using 'f' with complete data for current covariates
regression_formula <- as.formula(paste("p_mean_w ~", paste(covariates, collapse = " + ")))
model <- glm(regression_formula, data = tmp, weights = tmp$weight)
# Make predictions and update only those rows in 'tmp'
prediction_output <- predict(model, newdata = tmp, se.fit = TRUE, type = "response")
predictions <- pmin(pmax(prediction_output$fit, 0.0005), 1)
variance_f <- (prediction_output$se.fit)^2
# Assuming predictions and variance_f are vectors
alpha_beta <- solab(predictions, variance_f)
# Length of each segment (assuming alpha_beta is a single column)
segment_length <- length(alpha_beta) / 2
# Extract alpha values (first half of alpha_beta)
alpha_f <- alpha_beta[1:segment_length]
beta_f <- alpha_beta[(segment_length + 1):(2 * segment_length)]
new_mean <- (alpha_f + tmp$lqt2) / (alpha_f + beta_f + tmp$total_carriers)
delta <- 100 * sum(abs(new_mean - tmp$p_mean_w)) / length(tmp$var)
tmp$p_mean_w <- new_mean
tmp[tmp$p_mean_w<0,"p_mean_w"]<-0.005
mean_alpha <- mean(alpha_f)
mean_beta <- mean(beta_f)
print(paste("Mean alpha:", mean_alpha, "Mean beta:", mean_beta))
print(paste("Delta:", delta, "Count:", count))
}
# when tuning parameter is 11, predictions are equivalent to 10 variant heterozygote phenotypes
prior_mean <- tmp$p_mean_w
tmp$prior_mean <- tmp$p_mean_w
variance <- prior_mean*(1-prior_mean)
variance <- variance / (1 + nu)
ind_a <- seq(1, length(variance),1)
ind_b <- seq(length(variance)+1, length(variance)*2,1)
alpha <- solab(prior_mean,variance)[ind_a]
beta <- solab(prior_mean,variance)[ind_b]
new_mean <- (alpha + tmp$lqt2)/(alpha + beta + tmp$total_carriers)
tmp$p_mean_w <- new_mean
tmp$alpha <- alpha
tmp$beta <- beta
sub.tmp2 <- subset(tmp, !var %in% c(sub.tmp$var, sub.tmp1$var))
tmp <- rbind(sub.tmp,sub.tmp1,sub.tmp2)
# Selecting specific columns from tmp
tmp_selected <- tmp[tmp$var!="K897T", c("var", "blast_pssm", "provean_score", "pamscore", "aasimilaritymat", "revel_score", "cardiacboost", "am_pathogenicity", "lqt2", "unaff", "resnum", "wtAA", "mutAA", "clinvar.description", "gnomad.v4", "clinvar", "peak_tail", "traff_score", "score_SE", "cohort", "total_carriers", "penetrance_lqt2", "weight", "lqt2_dist", "lqt2_dist_weight", "lqt2_penetranceBayesian_initial", "lqt2_penetranceBayesian", "p_mean_w", "prior_mean", "pore")]
# Merging the selected columns from tmp with cohort
first.event<-merge(first_event_data.cohort, tmp_selected, by = "var", all.x = TRUE)
first.event[!is.na(first.event$QTc) & first.event$QTc > 700,"QTc"] <- 700
first.event$QTc.adj <- first.event$QTc/100
first.serious.event<-merge(first_serious_event_data.cohort, tmp_selected, by = "var", all.x = TRUE)
first.serious.event[!is.na(first.serious.event$QTc) & first.serious.event$QTc > 700,"QTc"] <- 700
first.serious.event$QTc.adj <- first.serious.event$QTc/100
cohort.var <- merge(cohort, tmp_selected, by = "var", all.x = TRUE)
cohort.var[!is.na(cohort.var$QTc) & cohort.var$QTc > 700,"QTc"] <- 700
cohort.var$QTc.adj <- cohort.var$QTc/100
cohort.var$QTc.adj.s <- scale(cohort.var$QTc.adj)
first.event$QTc.adj.s <- scale(first.event$QTc.adj)
first.serious.event$QTc.adj.s <- scale(first.serious.event$QTc.adj)
# Assign (un)affected in 'first.event' dataframe, encoded as 'Status
first.event <- first.event %>%
mutate(Status = ifelse(
(Sex == "Male" & QTc > 450 & Event == 1) |
(Sex == "Female" & QTc > 460 & Event == 1) |
QTc > 480, 1, 0),
ReverseStatus = ifelse(Status == 1, 0, 1)
)
# Assuming your dataframe is named 'first.event'
first.event <- first.event %>%
dplyr::group_by(var) %>%
dplyr::mutate(observed.lqt2 = sum(Status == 1) / n()) %>%
dplyr::ungroup()
t <- cohort.var[ !is.na(cohort.var$lqt2_dist) & !is.na(cohort.var$revel_score) & !is.na(cohort.var$peak_tail) & !is.na(cohort.var$p_mean_w) & !is.na(cohort.var$Sex) & !is.na(cohort.var$Age_at_event_end) & !is.na(cohort.var$traff_score),]
# Assuming df is your dataframe and y is your response variable
# Replace y with a suitable response variable for your context SeriousCardiacEvent
linear_model <- lm(Event ~ Sex + QTc.adj.s + p_mean_w + clinvar + revel_score + peak_tail + traff_score + prior_mean + lqt2_dist + am_pathogenicity + pore, data = t) # + prior_mean + lqt2_dist
vif_values <- vif(linear_model)
print(vif_values)
# Remove lqt2_dist
linear_model <- lm(Event ~ Sex + QTc.adj.s + p_mean_w + clinvar + revel_score + peak_tail + traff_score + am_pathogenicity + pore , data = t) # + prior_mean + lqt2_dist
vif_values <- vif(linear_model)
print(vif_values)
# Identifying complete cases for relevant columns
complete_cases <- complete.cases(first.event[, c("p_mean_w", "QTc.adj", "peak_tail", "Sex", "Patient", "clinvar", "revel_score", "lqt2_dist", "am_pathogenicity","traff_score", "pore")]) #"traff_score",
# Subset first.event with complete cases
first.event.complete <- first.event[complete_cases & first.event$QTc<900, ]
# Create dummy variables
dummy_vars <- model.matrix(~ Sex + Patient - 1, data = first.event.complete)
# Combine numeric and dummy variables
combined_data <- cbind(first.event.complete[, c("p_mean_w", "peak_tail","traff_score", "revel_score", "lqt2_dist", "am_pathogenicity", "pore", "clinvar", "QTc.adj")], dummy_vars) #"traff_score",
cor_matrix <- cor(combined_data, use = "pairwise.complete.obs", method = "spearman")
cor_matrix
abs_cor_matrix <- abs(cor_matrix)
# Reshape the absolute value correlation matrix
abs_cor_matrix_long <- melt(abs_cor_matrix)
# Create a heatmap with labels
ggplot(abs_cor_matrix_long, aes(Var1, Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", value)), vjust = 1) +  # Adding labels
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(0, 1), space = "Lab", name="Absolute Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = '', y = '', title = 'Absolute Spearman Correlation Matrix Heatmap')
model <- Surv(Age_at_event_start, Age_at_event_end, SeriousCardiacEvent) ~ # type = "counting") ~ #SeriousCardiac
QTc.adj +p_mean_w + peak_tail + traff_score
age_cutoff <- 40
t <- first.serious.event[!is.na(first.serious.event$Age_at_event_end) & !is.na(first.serious.event$p_mean_w) & first.serious.event$Country != "UK" & !is.na(first.serious.event$peak_tail) &  !is.na(first.serious.event$traff_score), ]
#t <- cohort.var[!is.na(cohort.var$Age_at_event_end) & !is.na(cohort.var$p_mean_w) & !is.na(cohort.var$peak_tail) & cohort.var$Country != "UK" & !is.na(cohort.var$traff_score), ]#
t$Age_at_event_end[t$Age_at_event_end > age_cutoff] <- age_cutoff
t<-t[t$Age_at_event_end > t$Age_at_event_start,]
t$SeriousCardiacEvent[t$Age_at_event_end == age_cutoff] <- 0
dd <- datadist(t)
options(datadist='dd')
t_male <- subset(t, Sex == "Male")
t_female <- subset(t, Sex == "Female")
cph_model_male <- cph(model, data = t_male, x=TRUE, y=TRUE, surv=TRUE)
cph_model_female <- cph(model, data = t_female, x=TRUE, y=TRUE, surv=TRUE)
# Test Proportional Hazards
test <- cox.zph(cph_model_male)
print(test)
test <- cox.zph(cph_model_female)
print(test)
cox.zph(cph_model_female) %>%
plot()
nom_male <- nomogram(cph_model_male, fun = plogis, fun.lp.at = c( -2, -1, 0.0, 2), funlabel = "Survival Probability")
nom_female <- nomogram(cph_model_female, fun = plogis, fun.lp.at = c( -2, -1, 0.0, 2), funlabel = "Survival Probability")
plot(nom_male) # Nomogram for males
plot(nom_female) # Nomogram for females
model <- Surv(Age_at_event_start, Age_at_event_end, SeriousCardiacEvent) ~ # type = "counting") ~ #SeriousCardiac
QTc.adj +p_mean_w + peak_tail + traff_score
age_cutoff <- 20
t <- first.serious.event[!is.na(first.serious.event$Age_at_event_end) & !is.na(first.serious.event$p_mean_w) & first.serious.event$Country != "UK" & !is.na(first.serious.event$peak_tail) &  !is.na(first.serious.event$traff_score), ]
#t <- cohort.var[!is.na(cohort.var$Age_at_event_end) & !is.na(cohort.var$p_mean_w) & !is.na(cohort.var$peak_tail) & cohort.var$Country != "UK" & !is.na(cohort.var$traff_score), ]#
t$Age_at_event_end[t$Age_at_event_end > age_cutoff] <- age_cutoff
t<-t[t$Age_at_event_end > t$Age_at_event_start,]
t$SeriousCardiacEvent[t$Age_at_event_end == age_cutoff] <- 0
dd <- datadist(t)
options(datadist='dd')
t_male <- subset(t, Sex == "Male")
t_female <- subset(t, Sex == "Female")
cph_model_male <- cph(model, data = t_male, x=TRUE, y=TRUE, surv=TRUE)
cph_model_female <- cph(model, data = t_female, x=TRUE, y=TRUE, surv=TRUE)
# Test Proportional Hazards
test <- cox.zph(cph_model_male)
print(test)
test <- cox.zph(cph_model_female)
print(test)
cox.zph(cph_model_female) %>%
plot()
nom_male <- nomogram(cph_model_male, fun = plogis, fun.lp.at = c( -2, -1, 0.0, 2), funlabel = "Survival Probability")
nom_female <- nomogram(cph_model_female, fun = plogis, fun.lp.at = c( -2, -1, 0.0, 2), funlabel = "Survival Probability")
plot(nom_male) # Nomogram for males
plot(nom_female) # Nomogram for females
model <- Surv(Age_at_event_start, Age_at_event_end, SeriousCardiacEvent) ~ # type = "counting") ~ #SeriousCardiac
QTc.adj +p_mean_w + peak_tail + traff_score
age_cutoff <- 20
t <- first.serious.event[!is.na(first.serious.event$Age_at_event_end) & !is.na(first.serious.event$p_mean_w)  & !is.na(first.serious.event$peak_tail) &  !is.na(first.serious.event$traff_score), ]
#t <- cohort.var[!is.na(cohort.var$Age_at_event_end) & !is.na(cohort.var$p_mean_w) & !is.na(cohort.var$peak_tail) & cohort.var$Country != "UK" & !is.na(cohort.var$traff_score), ]#
t$Age_at_event_end[t$Age_at_event_end > age_cutoff] <- age_cutoff
t<-t[t$Age_at_event_end > t$Age_at_event_start,]
t$SeriousCardiacEvent[t$Age_at_event_end == age_cutoff] <- 0
dd <- datadist(t)
options(datadist='dd')
t_male <- subset(t, Sex == "Male")
t_female <- subset(t, Sex == "Female")
cph_model_male <- cph(model, data = t_male, x=TRUE, y=TRUE, surv=TRUE)
cph_model_female <- cph(model, data = t_female, x=TRUE, y=TRUE, surv=TRUE)
# Test Proportional Hazards
test <- cox.zph(cph_model_male)
print(test)
test <- cox.zph(cph_model_female)
print(test)
cox.zph(cph_model_female) %>%
plot()
nom_male <- nomogram(cph_model_male, fun = plogis, fun.lp.at = c( -2, -1, 0.0, 2), funlabel = "Survival Probability")
nom_female <- nomogram(cph_model_female, fun = plogis, fun.lp.at = c( -2, -1, 0.0, 2), funlabel = "Survival Probability")
plot(nom_male) # Nomogram for males
plot(nom_female) # Nomogram for females
model <- Surv(Age_at_event_start, Age_at_event_end, SeriousCardiacEvent) ~ # type = "counting") ~ #SeriousCardiac
QTc.adj +p_mean_w + peak_tail + traff_score
age_cutoff <- 30
t <- first.serious.event[!is.na(first.serious.event$Age_at_event_end) & !is.na(first.serious.event$p_mean_w)  & !is.na(first.serious.event$peak_tail) &  !is.na(first.serious.event$traff_score), ]
#t <- cohort.var[!is.na(cohort.var$Age_at_event_end) & !is.na(cohort.var$p_mean_w) & !is.na(cohort.var$peak_tail) & cohort.var$Country != "UK" & !is.na(cohort.var$traff_score), ]#
t$Age_at_event_end[t$Age_at_event_end > age_cutoff] <- age_cutoff
t<-t[t$Age_at_event_end > t$Age_at_event_start,]
t$SeriousCardiacEvent[t$Age_at_event_end == age_cutoff] <- 0
dd <- datadist(t)
options(datadist='dd')
t_male <- subset(t, Sex == "Male")
t_female <- subset(t, Sex == "Female")
cph_model_male <- cph(model, data = t_male, x=TRUE, y=TRUE, surv=TRUE)
cph_model_female <- cph(model, data = t_female, x=TRUE, y=TRUE, surv=TRUE)
# Test Proportional Hazards
test <- cox.zph(cph_model_male)
print(test)
test <- cox.zph(cph_model_female)
print(test)
cox.zph(cph_model_female) %>%
plot()
nom_male <- nomogram(cph_model_male, fun = plogis, fun.lp.at = c( -2, -1, 0.0, 2), funlabel = "Survival Probability")
nom_female <- nomogram(cph_model_female, fun = plogis, fun.lp.at = c( -2, -1, 0.0, 2), funlabel = "Survival Probability")
plot(nom_male) # Nomogram for males
plot(nom_female) # Nomogram for females
age_cutoff <- 40
t <- cohort.var[!is.na(cohort.var$am_pathogenicity) & !is.na(cohort.var$QTc.adj) & cohort.var$Age_at_event_end<age_cutoff,]
t$Age_at_event_end[t$Age_at_event_end > age_cutoff] <- age_cutoff
t$SeriousCardiacEvent[t$Age_at_event_end == age_cutoff] <- 0
# Define the width of the sliding windows
p_mean_w_window_width <- 0.15  # e.g., from 0.1 to 0.3
QTc_adj_window_width <- 0.3   # e.g., from 40 to 50
# Define the range of thresholds to start the sliding windows
p_mean_w_thresholds_start <- seq(0.01, max(t$am_pathogenicity) - p_mean_w_window_width, by = 0.1)
QTc_adj_thresholds_start <- seq(3.8, 6.5 - QTc_adj_window_width, by = .1)
# Initialize an empty data frame to store results
results <- data.frame(p_mean_w_threshold_start = numeric(),
QTc_adj_threshold_start = numeric(),
event_rate = numeric(),
count = numeric(),  # Count of records
alpha = numeric())  # Alpha for transparency
# Loop over each combination of starting points of sliding windows
for (p_start in p_mean_w_thresholds_start) {
for (q_start in QTc_adj_thresholds_start) {
p_end <- p_start + p_mean_w_window_width
q_end <- q_start + QTc_adj_window_width
subset_data <- t %>%
filter(am_pathogenicity > p_start, am_pathogenicity <= p_end,
QTc.adj > q_start, QTc.adj <= q_end)
if (nrow(subset_data) > 0) {
total_time_at_risk <- sum(subset_data$Age_at_event_end - subset_data$Age_at_event_start)
total_events <- sum(subset_data$Event)
event_rate <- pmax(0.0001, pmin(total_events / total_time_at_risk * 100, 20))  # per 100 person-years
count <- nrow(subset_data)  # Count of records
alpha_value <- ifelse(count <= 5, count / 5, 1)  # Adjust alpha for counts <= 5
results <- rbind(results, data.frame(p_mean_w_threshold_start = p_start,
QTc_adj_threshold_start = q_start,
event_rate = event_rate,
count = count,
alpha = alpha_value))
}
}
}
# Transform event_rate for logarithmic scale
results$event_rate_log <- log1p(results$event_rate)
# Plotting with logarithmic color scale and transparency
ggplot(results, aes(x = p_mean_w_threshold_start, y = QTc_adj_threshold_start, fill = event_rate_log, alpha = alpha)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red", guide = guide_colourbar(title = "Log(Event Rate)\n(per 100 Person-Years)")) +
scale_alpha(range = c(0.1, 1), guide = "none") +
labs(title = "Serious Event Rates for Sliding Windows of Peak Tail Current and QTc.adj",
x = "penetrance current Window Start",
y = "QTc.adj Window Start") +
theme_minimal()
age_cutoff <- 40
t <- first.serious.event[!is.na(first.event$Sex) & !is.na(first.event$QTc.adj) & !is.na(first.event$p_mean_w) & !is.na(first.event$peak_tail) & !is.na(first.event$traff_score),]
t$Age_at_event_end[t$Age_at_event_end > age_cutoff] <- age_cutoff
t$SeriousCardiacEvent[t$Age_at_event_end == age_cutoff] <- 0
model <- Surv(Age_at_event_start, Age_at_event_end, SeriousCardiacEvent) ~
Sex + QTc.adj + peak_tail + p_mean_w + traff_score + revel_score + clinvar + am_pathogenicity
fit <- flexsurvspline(model,
data = t)
fit
# Time point for AUC calculation, choose a time that makes sense for your study
time_point <- 30 # years
# Generate predictions
predicted_probs <- 1-predict(fit, newdata = t, type = "survival", times = time_point)
valid_predicted_probs <- predicted_probs$.pred_survival[!is.na(predicted_probs$.pred_survival)]
valid_t <- t[!is.na(predicted_probs$.pred_survival),]
valid_t$valid_predicted_probs <- valid_predicted_probs
boot_function <- function(data, indices) {
sample_data <- data[indices, ]  # Resampling with replacement
model_boot <- flexsurvspline(model, data = sample_data)
return(coef(model_boot))  # Return coefficients
}
boot_results <- boot(data = t, statistic = boot_function, R = 200)  # R is the number of bootstrap replicates
age_cutoff <- 40
t <- first.event[!is.na(first.event$peak_tail) & !is.na(first.event$traff_score) & first.event$Country != "UK",]
t$Age_at_event_end[t$Age_at_event_end > age_cutoff] <- age_cutoff
t<-t[t$Age_at_event_end > t$Age_at_event_start,]
t$Event[t$Age_at_event_end == age_cutoff] <- 0
model <- Surv(Age_at_event_start, Age_at_event_end, Event) ~
Sex + QTc.adj + pore + p_mean_w + traff_score + clinvar + revel_score + am_pathogenicity + peak_tail
fit <- flexsurvspline(model,
data = t)
fit
age_cutoff <- 40
t <- first.event[!is.na(first.event$peak_tail) & !is.na(first.event$traff_score) & first.event$Country != "UK",]
t$Age_at_event_end[t$Age_at_event_end > age_cutoff] <- age_cutoff
t<-t[t$Age_at_event_end > t$Age_at_event_start,]
t$Event[t$Age_at_event_end == age_cutoff] <- 0
model <- Surv(Age_at_event_start, Age_at_event_end, Event) ~
Sex + QTc.adj + p_mean_w + traff_score + clinvar + revel_score + am_pathogenicity + peak_tail
fit <- flexsurvspline(model,
data = t)
fit
age_cutoff <- 40
t <- first.event[!is.na(first.event$peak_tail) & !is.na(first.event$traff_score) & first.event$Country != "UK",]
t$Age_at_event_end[t$Age_at_event_end > age_cutoff] <- age_cutoff
t<-t[t$Age_at_event_end > t$Age_at_event_start,]
t$Event[t$Age_at_event_end == age_cutoff] <- 0
model <- Surv(Age_at_event_start, Age_at_event_end, Event) ~
Sex + QTc.adj + p_mean_w + traff_score + clinvar + revel_score + am_pathogenicity + peak_tail
fit <- flexsurvspline(model,
data = t)
fit
age_cutoff <- 40
t <- first.event[!is.na(first.event$peak_tail) & !is.na(first.event$traff_score),]
t$Age_at_event_end[t$Age_at_event_end > age_cutoff] <- age_cutoff
t<-t[t$Age_at_event_end > t$Age_at_event_start,]
t$Event[t$Age_at_event_end == age_cutoff] <- 0
model <- Surv(Age_at_event_start, Age_at_event_end, Event) ~
Sex + QTc.adj + p_mean_w + traff_score + clinvar + revel_score + am_pathogenicity + peak_tail
fit <- flexsurvspline(model,
data = t)
fit
age_cutoff <- 40
t <- first.event[!is.na(first.event$peak_tail) & !is.na(first.event$traff_score),]
t$Age_at_event_end[t$Age_at_event_end > age_cutoff] <- age_cutoff
t<-t[t$Age_at_event_end > t$Age_at_event_start,]
t$Event[t$Age_at_event_end == age_cutoff] <- 0
model <- Surv(Age_at_event_start, Age_at_event_end, Event) ~
Sex + QTc.adj + p_mean_w*pore + traff_score + clinvar + revel_score + am_pathogenicity + peak_tail
fit <- flexsurvspline(model,
data = t)
fit
age_cutoff <- 40
t <- first.serious.event[!is.na(first.serious.event$peak_tail) & !is.na(first.serious.event$traff_score) & !is.na(first.serious.event$Sex) & !is.na(first.serious.event$QTc.adj),]
t$Age_at_event_end[t$Age_at_event_end > age_cutoff] <- age_cutoff
t<-t[t$Age_at_event_end > t$Age_at_event_start,]
t$SeriousCardiacEvent[t$Age_at_event_end == age_cutoff] <- 0
boot_auc <- function(data, indices) {
boot_data <- data[indices, ]  # Resample the data
roc_result <- survivalROC::survivalROC(
Stime = boot_data$Age_at_event_end,
status = boot_data$Event,
marker = boot_data$valid_predicted_probs,
predict.time = time_point,
method = "KM"
)
return(roc_result$AUC)  # Return the AUC
}
# Time point for AUC calculation, choose a time that makes sense for your study
time_point <- 20 # years
boot_number <- 500 # bootstrap repetitions, production 500-1000
# Fit the model 1
fit1 <- flexsurvspline(Surv(Age_at_event_start, Age_at_event_end, SeriousCardiacEvent) ~ Sex + QTc.adj + pore, data = t)
# Generate predictions and compute risk
predicted_probs1 <- 1 - predict(fit1, newdata = t, type = "survival", times = time_point)
# Convert to risk probabilities
valid_predicted_probs1 <- predicted_probs1$.pred_survival[!is.na(predicted_probs1$.pred_survival)]
# Filter the original dataset for valid cases
valid_t1 <- t[!is.na(predicted_probs1$.pred_survival),]
valid_t1$valid_predicted_probs1 <- valid_predicted_probs1
#valid_t1 <- valid_t1[valid_t1$Patient=="Family Member",]
# Compute ROC curve using valid data
roc_result1 <- survivalROC::survivalROC(Stime = valid_t1$Age_at_event_end,
status = valid_t1$SeriousCardiacEvent,
marker = valid_t1$valid_predicted_probs1,
predict.time = time_point,
method = "KM")
# Extract sensitivity and specificity
sensitivity1 <- roc_result1$TP
specificity1 <- roc_result1$FP
set.seed(123)  # For reproducibility
boot_results1 <- boot(data = valid_t1, statistic = boot_auc, R = boot_number)
boot_coefs1 <- boot_results1$t
# Calculate mean and confidence intervals for each coefficient across rows
auc1 <- apply(boot_coefs1, 2, mean)
ci1 <- apply(boot_coefs1, 2, function(x) quantile(x, c(0.025, 0.975)))
# Prepare ROC curve data
roc_curve1 <- data.frame(Specificity = specificity1, Sensitivity = sensitivity1, Model = "Sex and QTc (Base Model)")
# Fit the model 2
fit2 <- flexsurvspline(Surv(Age_at_event_start, Age_at_event_end, SeriousCardiacEvent) ~ Sex + QTc.adj + p_mean_w + pore, data = t)
# Generate predictions and compute risk
predicted_probs2 <- 1 - predict(fit2, newdata = t, type = "survival", times = time_point)
# Convert to risk probabilities
valid_predicted_probs2 <- predicted_probs2$.pred_survival[!is.na(predicted_probs2$.pred_survival)]
# Filter the original dataset for valid cases
valid_t2 <- t[!is.na(predicted_probs2$.pred_survival),]
valid_t2$valid_predicted_probs <- valid_predicted_probs2
#valid_t2 <- valid_t2[valid_t2$Patient=="Family Member",]
# Compute ROC curve using valid data
roc_result2 <- survivalROC::survivalROC(Stime = valid_t2$Age_at_event_end,
status = valid_t2$SeriousCardiacEvent,
marker = valid_t2$valid_predicted_probs,
predict.time = time_point,
method = "KM")
# Extract sensitivity and specificity
sensitivity2 <- roc_result2$TP
specificity2 <- roc_result2$FP
set.seed(123)  # For reproducibility
boot_results2 <- boot(data = valid_t2, statistic = boot_auc, R = boot_number)
boot_coefs2 <- boot_results2$t
# Calculate mean and confidence intervals for each coefficient across rows
auc2 <- apply(boot_coefs2, 2, mean)
ci2 <- apply(boot_coefs2, 2, function(x) quantile(x, c(0.025, 0.975)))
# Prepare ROC curve data
roc_curve2 <- data.frame(Specificity = specificity2, Sensitivity = sensitivity2, Model = "Base Model + LQTS Penetrance")
# Fit the model 3
fit3 <- flexsurvspline(Surv(Age_at_event_start, Age_at_event_end, SeriousCardiacEvent) ~ Sex + QTc.adj + p_mean_w + peak_tail + traff_score + pore, data = t)
# Generate predictions and compute risk
predicted_probs3 <- 1 - predict(fit3, newdata = t, type = "survival", times = time_point)
# Convert to risk probabilities
valid_predicted_probs3 <- predicted_probs3$.pred_survival[!is.na(predicted_probs3$.pred_survival)]
# Filter the original dataset for valid cases
valid_t3 <- t[!is.na(predicted_probs3$.pred_survival),]
valid_t3$valid_predicted_probs <- valid_predicted_probs3
#valid_t3 <- valid_t3[valid_t3$Patient=="Family Member",]
# Compute ROC curve using valid data
roc_result3 <- survivalROC::survivalROC(Stime = valid_t3$Age_at_event_end,
status = valid_t3$SeriousCardiacEvent,
marker = valid_t3$valid_predicted_probs,
predict.time = time_point,
method = "KM")
# Extract sensitivity and specificity
sensitivity3 <- roc_result3$TP
specificity3 <- roc_result3$FP
set.seed(123)  # For reproducibility
boot_results3 <- boot(data = valid_t3, statistic = boot_auc, R = boot_number)
